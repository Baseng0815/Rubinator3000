<Application
    x:Class="Rubinator3000.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Rubinator3000"
    StartupUri="MainWindow.xaml">
    <Application.Resources>
        <SolidColorBrush x:Key="BackgroundColor" Color="#000000" />
        <SolidColorBrush x:Key="ForegroundColor" Color="#006400" />
        <!--  Font  -->
        <FontFamily x:Key="Font">Lucida Console</FontFamily>

        <!--  Border Color  -->
        <SolidColorBrush x:Key="BorderColor" Color="#11FFFFFF" />

        <!--  Separator Template  -->
        <ControlTemplate x:Key="SeparatorTemplate" TargetType="{x:Type Separator}">
            <Grid>
                <Rectangle Height="1" Stroke="{StaticResource ForegroundColor}" />
            </Grid>
        </ControlTemplate>

        <!--  MenuItemTemplate  -->
        <ControlTemplate x:Key="MenuItemTemplate" TargetType="{x:Type MenuItem}">
            <Border
                x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition
                            x:Name="Col0"
                            Width="Auto"
                            MinWidth="17"
                            SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition x:Name="Col3" Width="14" />
                    </Grid.ColumnDefinitions>

                    <!--  ContentPresenter to show an Icon if needed  -->
                    <ContentPresenter
                        x:Name="Icon"
                        Grid.Column="0"
                        Margin="4,0,6,0"
                        VerticalAlignment="Center"
                        ContentSource="Icon" />

                    <!--  Glyph is a checkmark if needed for a checkable menu  -->
                    <Grid
                        x:Name="GlyphPanel"
                        Grid.Column="0"
                        Margin="4,0,6,0"
                        VerticalAlignment="Center"
                        Visibility="Hidden">
                        <Path
                            x:Name="GlyphPanelpath"
                            VerticalAlignment="Center"
                            Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                            Fill="{TemplateBinding Foreground}"
                            FlowDirection="LeftToRight" />
                    </Grid>

                    <!--  Content for the menu text etc  -->
                    <ContentPresenter
                        x:Name="HeaderHost"
                        Grid.Column="1"
                        Margin="{TemplateBinding Padding}"
                        ContentSource="Header"
                        RecognizesAccessKey="True" />

                    <!--  Content for the menu IGT  -->
                    <ContentPresenter
                        x:Name="IGTHost"
                        Grid.Column="2"
                        Margin="8,1,8,1"
                        VerticalAlignment="Center"
                        ContentSource="InputGestureText" />

                    <!--  Arrow drawn path which points to the next level of the menu  -->
                    <Grid
                        x:Name="ArrowPanel"
                        Grid.Column="3"
                        Margin="4,0,6,0"
                        VerticalAlignment="Center">
                        <Path
                            x:Name="ArrowPanelPath"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="M0,0 L0,8 L4,4 z"
                            Fill="{TemplateBinding Foreground}" />
                    </Grid>

                    <!--  The Popup is the body of the menu which expands down or across depending on the level of the item  -->
                    <Popup
                        x:Name="SubMenuPopup"
                        Focusable="false"
                        IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                        Placement="Right"
                        PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <Border
                            x:Name="SubMenuBorder"
                            Padding="2,2,2,2"
                            BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"
                            BorderThickness="1">
                            <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                <!--  StackPanel holds children of the menu. This is set by IsItemsHost=True  -->
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </Grid>
                        </Border>
                    </Popup>
                </Grid>
            </Border>

            <!--  These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role  -->
            <ControlTemplate.Triggers>
                <!--  Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down  -->
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Padding" Value="6,1,6,1" />
                    <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
                    <Setter TargetName="Col0" Property="MinWidth" Value="0" />
                    <Setter TargetName="Col3" Property="Width" Value="Auto" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Collapsed" />
                    <Setter TargetName="IGTHost" Property="Visibility" Value="Collapsed" />
                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                </Trigger>

                <!--  Role = TopLevelItem :  this is a child menu item from the top level without any child items  -->
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Padding" Value="6,1,6,1" />
                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                </Trigger>

                <!--  Role = SubMenuHeader : this is a child menu item which does not have children  -->
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="DockPanel.Dock" Value="Top" />
                    <Setter Property="Padding" Value="0,2,0,2" />
                </Trigger>

                <!--  Role = SubMenuItem : this is a child menu item which has children  -->
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="DockPanel.Dock" Value="Top" />
                    <Setter Property="Padding" Value="0,2,0,2" />
                    <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None" />
                </Trigger>

                <!--  If no Icon is present the we collapse the Icon Content  -->
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>

                <!--  The GlyphPanel contains the CheckMark  -->
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>

                <!--  Using the system colors for the Menu Highlight and IsEnabled  -->
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="LightGray" />
                    <Setter Property="Foreground" Value="Black" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="LightGray" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Application.Resources>
</Application>
