
MotorController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800060  00800060  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001026  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e5  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000516  00000000  00000000  00001d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c4  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000574  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__dtors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	5f 00       	.word	0x005f	; ????

00000056 <__ctors_end>:
  56:	73 00       	.word	0x0073	; ????

00000058 <__dtors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d4 e0       	ldi	r29, 0x04	; 4
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	a0 e6       	ldi	r26, 0x60	; 96
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	e8 eb       	ldi	r30, 0xB8	; 184
  6c:	f1 e0       	ldi	r31, 0x01	; 1
  6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	a0 36       	cpi	r26, 0x60	; 96
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	a0 e6       	ldi	r26, 0x60	; 96
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	ad 39       	cpi	r26, 0x9D	; 157
  86:	b2 07       	cpc	r27, r18
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>

0000008a <__do_global_ctors>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	cb e2       	ldi	r28, 0x2B	; 43
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	04 c0       	rjmp	.+8      	; 0x9a <__do_global_ctors+0x10>
  92:	21 97       	sbiw	r28, 0x01	; 1
  94:	fe 01       	movw	r30, r28
  96:	0e 94 c9 00 	call	0x192	; 0x192 <__tablejump2__>
  9a:	ca 32       	cpi	r28, 0x2A	; 42
  9c:	d1 07       	cpc	r29, r17
  9e:	c9 f7       	brne	.-14     	; 0x92 <__do_global_ctors+0x8>
  a0:	0e 94 56 00 	call	0xac	; 0xac <main>
  a4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__do_global_dtors>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <main>:
Stepper steppers[6];
unsigned char status;

int main(void)
{
	status = 0x00;	// set unconnected status
  ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	Serial::begin(9600);	// init serial
  b0:	60 e8       	ldi	r22, 0x80	; 128
  b2:	75 e2       	ldi	r23, 0x25	; 37
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6Serial5beginEm>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x10>

000000be <_GLOBAL__sub_I_steppers>:
	
	
    while (1) {
		
    }
}
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	c1 e6       	ldi	r28, 0x61	; 97
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	0d e9       	ldi	r16, 0x9D	; 157
  cc:	10 e0       	ldi	r17, 0x00	; 0

#include <avr/io.h>
#include "Stepper.h"
#include "Serial.h"

Stepper steppers[6];
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7StepperC1Ev>
  d4:	2a 96       	adiw	r28, 0x0a	; 10
  d6:	c0 17       	cp	r28, r16
  d8:	d1 07       	cpc	r29, r17
  da:	c9 f7       	brne	.-14     	; 0xce <_GLOBAL__sub_I_steppers+0x10>
	
	
    while (1) {
		
    }
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	08 95       	ret

000000e6 <_GLOBAL__sub_D_steppers>:
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd e9       	ldi	r28, 0x9D	; 157
  ec:	d0 e0       	ldi	r29, 0x00	; 0

#include <avr/io.h>
#include "Stepper.h"
#include "Serial.h"

Stepper steppers[6];
  ee:	2a 97       	sbiw	r28, 0x0a	; 10
  f0:	ce 01       	movw	r24, r28
  f2:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN7StepperD1Ev>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	c1 36       	cpi	r28, 0x61	; 97
  fa:	d8 07       	cpc	r29, r24
  fc:	c1 f7       	brne	.-16     	; 0xee <_GLOBAL__sub_D_steppers+0x8>
	
	
    while (1) {
		
    }
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <_ZN6Serial5beginEm>:
#include <avr/io.h>

#define F_CPU 8000000UL

void Serial::begin(unsigned long baudRate) {
	uint16_t ubbr = (F_CPU / (16 * baudRate) - 1);
 104:	dc 01       	movw	r26, r24
 106:	cb 01       	movw	r24, r22
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	aa 1f       	adc	r26, r26
 116:	bb 1f       	adc	r27, r27
 118:	9c 01       	movw	r18, r24
 11a:	ad 01       	movw	r20, r26
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	44 1f       	adc	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	44 1f       	adc	r20, r20
 12a:	55 1f       	adc	r21, r21
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	72 e1       	ldi	r23, 0x12	; 18
 130:	8a e7       	ldi	r24, 0x7A	; 122
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 a7 00 	call	0x14e	; 0x14e <__udivmodsi4>
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	31 09       	sbc	r19, r1
	
	// write baud rate registers
	UBRRH = ubbr >> 8;
 13c:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubbr;
 13e:	29 b9       	out	0x09, r18	; 9
	
	// write enable registers
	UCSRB = (1 << TXEN) | (1 << RXEN);
 140:	88 e1       	ldi	r24, 0x18	; 24
 142:	8a b9       	out	0x0a, r24	; 10
	
	// write character size
	UCSRC = (1 << UCSZ0) | (1 << UCSZ1);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 bd       	out	0x20, r24	; 32
 148:	08 95       	ret

0000014a <_ZN7StepperC1Ev>:
#include "Stepper.h"
#include "pins.h"
#include <stdlib.h>

// default constructor
Stepper::Stepper() {
 14a:	08 95       	ret

0000014c <_ZN7StepperD1Ev>:
} //Stepper

// default destructor
Stepper::~Stepper() {
 14c:	08 95       	ret

0000014e <__udivmodsi4>:
 14e:	a1 e2       	ldi	r26, 0x21	; 33
 150:	1a 2e       	mov	r1, r26
 152:	aa 1b       	sub	r26, r26
 154:	bb 1b       	sub	r27, r27
 156:	fd 01       	movw	r30, r26
 158:	0d c0       	rjmp	.+26     	; 0x174 <__udivmodsi4_ep>

0000015a <__udivmodsi4_loop>:
 15a:	aa 1f       	adc	r26, r26
 15c:	bb 1f       	adc	r27, r27
 15e:	ee 1f       	adc	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	a2 17       	cp	r26, r18
 164:	b3 07       	cpc	r27, r19
 166:	e4 07       	cpc	r30, r20
 168:	f5 07       	cpc	r31, r21
 16a:	20 f0       	brcs	.+8      	; 0x174 <__udivmodsi4_ep>
 16c:	a2 1b       	sub	r26, r18
 16e:	b3 0b       	sbc	r27, r19
 170:	e4 0b       	sbc	r30, r20
 172:	f5 0b       	sbc	r31, r21

00000174 <__udivmodsi4_ep>:
 174:	66 1f       	adc	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	1a 94       	dec	r1
 17e:	69 f7       	brne	.-38     	; 0x15a <__udivmodsi4_loop>
 180:	60 95       	com	r22
 182:	70 95       	com	r23
 184:	80 95       	com	r24
 186:	90 95       	com	r25
 188:	9b 01       	movw	r18, r22
 18a:	ac 01       	movw	r20, r24
 18c:	bd 01       	movw	r22, r26
 18e:	cf 01       	movw	r24, r30
 190:	08 95       	ret

00000192 <__tablejump2__>:
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	05 90       	lpm	r0, Z+
 198:	f4 91       	lpm	r31, Z
 19a:	e0 2d       	mov	r30, r0
 19c:	09 94       	ijmp

0000019e <__do_global_dtors>:
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	cb e2       	ldi	r28, 0x2B	; 43
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <__do_global_dtors+0x10>
 1a6:	fe 01       	movw	r30, r28
 1a8:	0e 94 c9 00 	call	0x192	; 0x192 <__tablejump2__>
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	cc 32       	cpi	r28, 0x2C	; 44
 1b0:	d1 07       	cpc	r29, r17
 1b2:	c9 f7       	brne	.-14     	; 0x1a6 <__do_global_dtors+0x8>
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
